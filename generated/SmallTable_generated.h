// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SMALLTABLE_FLATTEST_H_
#define FLATBUFFERS_GENERATED_SMALLTABLE_FLATTEST_H_

#include "flatbuffers/flatbuffers.h"

namespace FlatTest {

struct SmallTable;
struct SmallTableBuilder;

struct SmallTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SmallTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BELMENT = 4
  };
  uint8_t belment() const {
    return GetField<uint8_t>(VT_BELMENT, 0);
  }
  bool mutate_belment(uint8_t _belment) {
    return SetField<uint8_t>(VT_BELMENT, _belment, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BELMENT) &&
           verifier.EndTable();
  }
};

struct SmallTableBuilder {
  typedef SmallTable Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_belment(uint8_t belment) {
    fbb_.AddElement<uint8_t>(SmallTable::VT_BELMENT, belment, 0);
  }
  explicit SmallTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SmallTableBuilder &operator=(const SmallTableBuilder &);
  flatbuffers::Offset<SmallTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SmallTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<SmallTable> CreateSmallTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t belment = 0) {
  SmallTableBuilder builder_(_fbb);
  builder_.add_belment(belment);
  return builder_.Finish();
}

inline const FlatTest::SmallTable *GetSmallTable(const void *buf) {
  return flatbuffers::GetRoot<FlatTest::SmallTable>(buf);
}

inline const FlatTest::SmallTable *GetSizePrefixedSmallTable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FlatTest::SmallTable>(buf);
}

inline SmallTable *GetMutableSmallTable(void *buf) {
  return flatbuffers::GetMutableRoot<SmallTable>(buf);
}

inline bool VerifySmallTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatTest::SmallTable>(nullptr);
}

inline bool VerifySizePrefixedSmallTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatTest::SmallTable>(nullptr);
}

inline void FinishSmallTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatTest::SmallTable> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSmallTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatTest::SmallTable> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatTest

#endif  // FLATBUFFERS_GENERATED_SMALLTABLE_FLATTEST_H_
