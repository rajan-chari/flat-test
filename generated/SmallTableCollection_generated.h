// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SMALLTABLECOLLECTION_FLATTEST_H_
#define FLATBUFFERS_GENERATED_SMALLTABLECOLLECTION_FLATTEST_H_

#include "flatbuffers/flatbuffers.h"

#include "SmallTable_generated.h"

namespace FlatTest {

struct SmallTableCollection;
struct SmallTableCollectionBuilder;

struct SmallTableCollection FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SmallTableCollectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_C1 = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<FlatTest::SmallTable>> *c1() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FlatTest::SmallTable>> *>(VT_C1);
  }
  flatbuffers::Vector<flatbuffers::Offset<FlatTest::SmallTable>> *mutable_c1() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<FlatTest::SmallTable>> *>(VT_C1);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_C1) &&
           verifier.VerifyVector(c1()) &&
           verifier.VerifyVectorOfTables(c1()) &&
           verifier.EndTable();
  }
};

struct SmallTableCollectionBuilder {
  typedef SmallTableCollection Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_c1(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FlatTest::SmallTable>>> c1) {
    fbb_.AddOffset(SmallTableCollection::VT_C1, c1);
  }
  explicit SmallTableCollectionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SmallTableCollectionBuilder &operator=(const SmallTableCollectionBuilder &);
  flatbuffers::Offset<SmallTableCollection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SmallTableCollection>(end);
    return o;
  }
};

inline flatbuffers::Offset<SmallTableCollection> CreateSmallTableCollection(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FlatTest::SmallTable>>> c1 = 0) {
  SmallTableCollectionBuilder builder_(_fbb);
  builder_.add_c1(c1);
  return builder_.Finish();
}

inline flatbuffers::Offset<SmallTableCollection> CreateSmallTableCollectionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<FlatTest::SmallTable>> *c1 = nullptr) {
  auto c1__ = c1 ? _fbb.CreateVector<flatbuffers::Offset<FlatTest::SmallTable>>(*c1) : 0;
  return FlatTest::CreateSmallTableCollection(
      _fbb,
      c1__);
}

inline const FlatTest::SmallTableCollection *GetSmallTableCollection(const void *buf) {
  return flatbuffers::GetRoot<FlatTest::SmallTableCollection>(buf);
}

inline const FlatTest::SmallTableCollection *GetSizePrefixedSmallTableCollection(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FlatTest::SmallTableCollection>(buf);
}

inline SmallTableCollection *GetMutableSmallTableCollection(void *buf) {
  return flatbuffers::GetMutableRoot<SmallTableCollection>(buf);
}

inline bool VerifySmallTableCollectionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatTest::SmallTableCollection>(nullptr);
}

inline bool VerifySizePrefixedSmallTableCollectionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatTest::SmallTableCollection>(nullptr);
}

inline void FinishSmallTableCollectionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatTest::SmallTableCollection> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSmallTableCollectionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatTest::SmallTableCollection> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatTest

#endif  // FLATBUFFERS_GENERATED_SMALLTABLECOLLECTION_FLATTEST_H_
